#!/usr/bin/env perl
#
# Summary: show all installed CPAN modules and their version
#
# Usage: plenv list-cpan-modules [-a]
#
# -a|--all      Show the distribution name and the (relative) file path to to
#               the module.
#
# Similar to the builtin 'list-modules' command, but this will list *all*
# modules (not just dists) and their version (if any).
#
# If -a is given show more information than just the version. Also show the
# distribution name it belongs to and the (relative) path it is installed at.
#
# This command assumes the distributions were installed via cpanm (or similar)
# and that the .meta directory exists and contains the install.json and
# MYMETA.json files.
#
# This will look for all files within @INC.

use strict;
use warnings;

use version;
use JSON::PP;
use File::Find;
use Getopt::Long;

my $p = 
  Getopt::Long::Parser->new(
    config => [qw(posix_default no_ignore_case pass_through permute bundling)]
  );
$p->getoptions(
  'a|all'      => \my $all
);

sub all_installed_dists {
  my %dists;
  File::Find::find( 
    sub { 
      return unless /^install.json$/;
      open my $ijh, '<', $_;
      my $json;
      {
        local $/ = undef;
        $json = <$ijh>
      }

      my $ij = JSON::PP->new->decode( $json );

      my $target   = $ij->{ target };
      my $name     = $ij->{ name };
      my $distvers = $ij->{ version };
      my $pathname = $ij->{ pathname };
      my $provides = $ij->{ provides };

      my $distname = exists $provides->{ $name } ? $name : $target;

      if( exists $dists{ $distname } ) {
        my $old = delete $dists{ $distname };
        my $oldvers = version->parse( $old->{ version } );
        my $newvers = version->parse( $distvers );
        if( $oldvers > $newvers ) {
          $dists{ $distname } = $old;
          return;
        }
      }

      $dists{ $distname } = {
        pathname => $pathname,
        version  => $distvers,
        module   => $distname,
        provides => $provides
      };
      return;
    },
    @INC );

  return sort { $a->{ module } cmp $b->{ module } } 
         values %dists;
}

sub list_all_modules {
  my @modules;
  foreach my $dist (all_installed_dists()) {
    foreach my $name (sort keys %{ $dist->{ provides } }) {
      my $info = $dist->{ provides }->{ $name };
      my $version = version->parse( $info->{ version } );
      $version = '-' 
        if( ! defined $version || ( ! ref $version && $version eq '' ) );
      push @modules, 
        $all
        ?  { 
             name   => $name, 
             detail => join(' ', $version, $dist->{ module }, $info->{ file }) 
           }
        :  { 
             name   => $name,
             detail => $version
           };
    }
  }
  map  { printf "%s %s\n", $_->{ name }, $_->{ detail } } 
  sort { $a->{ name } cmp $b->{ name } }
  @modules;
}

list_all_modules();
